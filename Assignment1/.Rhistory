geom_point(data=predicted_cost_p, aes(y=cost, color="c3", shape="sh3"))
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- predict(model2, nuclear)
predicted_cost_p <- predict(filtermodel, nuclear)
predicted_cost
typeof(predicted_cost)
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=cost, color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=cost, color="c3", shape="sh3"))
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
predicted_cost
nuclear
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=cost, color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=cost, color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
predicted_cost
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple", )
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
predicted_cost
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=cost, color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=cost, color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
predicted_cost
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=exp(log(cost)), color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=exp(log(cost)), color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
predicted_cost
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=log(cost), color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=log(cost), color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
names(predicted_cost)
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=log(cost), color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=log(cost), color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
names(predicted_cost)
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear, aes(y=cost, color="c1", shape="sh1")) +
geom_point(data=predicted_cost, aes(y=names(predicted_cost)
, color="c2", shape="sh2")) +
geom_point(data=predicted_cost_p, aes(y=names(predicted_cost_p)
, color="c3", shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
names(predicted_cost)
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear,
aes(y=cost,
color="c1",
shape="sh1")) +
geom_point(data=predicted_cost,
aes(y=names(predicted_cost),
color="c2",
shape="sh2")) +
geom_point(data=predicted_cost_p,
aes(y=names(predicted_cost_p),
color="c3",
shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
names(predicted_cost)
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear,
aes(y=cost,
color="c1",
shape="sh1")) +
geom_point(data=predicted_cost,
aes(y=names(predicted_cost),
color="c2",
shape="sh2")) +
geom_point(data=predicted_cost_p,
aes(y=names(predicted_cost_p),
color="c3",
shape="sh3"))
plot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
plot(filtermodel)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear.cost
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
y.sum
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
y.sum()
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)/length(y)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)/length(y)
length(y)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)#/length(y)
length(y)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)/length(y)
length(y)
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)/length(y)
length(y)
y.hat
y.hat <- predict(filtermodel, nuclear)
y <- nuclear$cost
sum((y.hat-y)^2)/length(y)
length(y)
y.hat-y
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
sum((y.hat-y)^2)/length(y)
length(y)
y.hat-
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
sum((y.hat-y)^2)/length(y)
median(abs(y-y.hat))
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
predicted_cost <- data.frame(predict(model2, nuclear))
predicted_cost_p <- data.frame(predict(filtermodel, nuclear))
names(predicted_cost)
nuclear
colors <- c("c1" = "blue", "c2" = "red" , "c3" = "purple")
shapes <- c("sh1" = 10, "sh2" = 10 , "sh3" = 10 )
plot <- ggplot(data=nuclear, aes(x = cap))+
geom_point(data=nuclear,
aes(y=cost,
color="c1",
shape="sh1")) +
geom_point(data=predicted_cost,
aes(y=names(predicted_cost),
color="c2",
shape="sh2")) +
geom_point(data=predicted_cost_p,
aes(y=names(predicted_cost_p),
color="c3",
shape="sh3"))
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
plot(y.hat, y)
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
plot(y.hat, y)
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
plot(y,y.hat)
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y.2 <- predict(model2, nuclear)
y <- log(nuclear$cost)
plot(y,y.hat)
plot
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y.2 <- predict(model2, nuclear)
y <- log(nuclear$cost)
plot(y,y.hat)
plot(y,y.h2)
# Making plots of the final model from forward selection with the criteria of p values < 0.05
library(ggplot2)
y.hat <- predict(filtermodel, nuclear)
y.2 <- predict(model2, nuclear)
y <- log(nuclear$cost)
plot(y,y.hat)
plot(y,y.2)
y.hat <- predict(filtermodel, nuclear)
y <- log(nuclear$cost)
MSE <- sum((y.hat-y)^2)/length(y)
MSE
R2 <- 1- sum((y-y-hat))^2)/sum((y-mean(y))
R2 <- 1- sum((y-y-hat)^2)/sum((y-mean(y))
R2 <- 1- sum((y-y-hat)^2)/sum((y-mean(y))^2)
R2 <- 1- sum((y-y.hat)^2)/sum((y-mean(y))^2)
R2 <- 1- sum((y-y.hat)^2)/sum((y-mean(y))^2)
R2
R2 <- 1- sum((y-y.hat)^2)/sum((y-mean(y))^2)
R2
var(y.hat)/var(y)
R2 <- 1- sum((y-y.hat)^2)/sum((y-mean(y))^2)
R2
# Or:
var(y.hat)/var(y)
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, d.new, interval="confidence")
d.new
d.new
nuclear
d.new = data.frame(cost = NA, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, d.new, interval="confidence")
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, d.new, interval="confidence")
filtermodel
predict(filtermode, nuclear[:5,:])
predict(filtermode, nuclear[1:5,])
predict(filtermodel, nuclear[1:5,])
predict(filtermodel, nuclear[1:5,])
typeof(nuclear)
predict(filtermodel, nuclear[1:5,])
typeof(nuclear)
predict(filtermodel, nuclear[1:5,])
typeof(nuclear)
predict(filtermodel, nuclear[1:5,])
typeof(nuclear[1:5,])
predict(filtermodel, nuclear[1:5,])
typeof(d.new))
predict(filtermodel, nuclear[1:5,])
typeof(d.new)
predict(filtermodel, nuclear[2:5,])
typeof(d.new)
predict(filtermodel, nuclear[1:5,2:])
predict(filtermodel, nuclear[1:5,2])
predict(filtermodel, nuclear[1:5,2:])
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, d.new)
predict(filtermodel, nuclear[1:5,2:])
predict(filtermodel, nuclear[1:5,2:11])
typeof(d.new)
predict(filtermodel, nuclear[1:5,3:11])
predict(filtermodel, nuclear[1:5,1:11])
typeof(d.new)
predict(filtermodel, nuclear[1:5,2:11])
typeof(d.new)
predict(filtermodel, nuclear[1:5,1:11])
typeof(d.new)
predict(filtermodel, nuclear[1:5,1:11])
d.new[1]
typeof(d.new)
predict(filtermodel, nuclear[1:5,1:11])
d.new[]
typeof(d.new)
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, d.new)
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="confidence")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear[1,], interval="confidence")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="confidence")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="predict")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="predict")-predict(filtermode, nuclear, interval="confidence")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="predict")-predict(filtermodel, nuclear, interval="confidence")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="predict")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear[,2:11], interval="predict")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear[,2:10], interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear, interval="predict")
#predict(filtermodel, d.new, interval="confidence")
#predict(filtermodel, d.new, interval="predict")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
#predict(filtermodel, nuclear, interval="predict")
predict(filtermodel, d.new, interval="confidence")
d.new = as.matrix(data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1))
d.new
#predict(filtermodel, nuclear, interval="predict")
predict(filtermodel, d.new, interval="confidence")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
#predict(filtermodel, nuclear, interval="predict")
predict(filtermodel, d.new, interval="confidence")
d.new = data.frame(cost = 2, data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
#predict(filtermodel, nuclear, interval="predict")
y.conf <- predict(filtermodel, d.new, interval="confidence")
head(d.new)
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
head(d.new)
head(nuclear)
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear[1,], interval="predict")
y.conf <- predict(filtermodel, d.new, interval="confidence")
d.new = data.frame(data=70.0, t1=int(13), t2=int(50), cap=int(800), pr=int(1), ne=int(0), ct=0, bw=1, cum.n=8, pt=1)
d.new = data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
d.new
predict(filtermodel, nuclear[1,], interval="predict")
y.conf <- predict(filtermodel, d.new, interval="confidence")
d.new <- nuclear
d.new[] <- NA
d.new <- nuclear
d.new[] <- NA
head(d.new)
d.new <- nuclear
d.new[] <- NA
d.new <- data.frame(data=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
head(d.new)
d.new <- nuclear
d.new[] <- NA
d.new <- data.frame(data=70.0, t1=as.integer(13), t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
head(d.new)
d.new <- nuclear
d.new[] <- NA
d.new <- data.frame(data=70.0, t1=as.integer(13), t2=as.integer(50), cap=as.integer(800), pr=as.integer(1), ne=as.integer(0), ct=as.integer(0), bw=as.integer(1), cum.n=as.integer(8), pt=as.integer(1))
d.new <- data.frame(data=70.0, t1=as.integer(13), t2=as.integer(50), cap=as.integer(800), pr=as.integer(1), ne=as.integer(0), ct=as.integer(0), bw=as.integer(1), cum.n=as.integer(8), pt=as.integer(1))
head(d.new)
head(nuclear)
y.conf <- predict(filtermodel, d.new, interval="confidence")
y.conf <- predict(filtermodel, d.new, interval="confidence")
predict(filtermodel, d.new, interval="confidence")
help(predict.lm)
d.new <- data.frame(data=70.0,
t1=as.integer(13),
t2=as.integer(50),
cap=as.integer(800),
pr=as.integer(1),
ne=as.integer(0)
, ct=as.integer(0),
bw=as.integer(1),
cum.n=as.integer(8),
pt=as.integer(1)
)
predict(filtermodel, d.new, interval="confidence")
levels(d.new)
levels(nuclear)
names(nuclear)
names(nuclear)
names(d.new)
d.new <- data.frame(date=70.0,
t1=as.integer(13),
t2=as.integer(50),
cap=as.integer(800),
pr=as.integer(1),
ne=as.integer(0)
, ct=as.integer(0),
bw=as.integer(1),
cum.n=as.integer(8),
pt=as.integer(1)
)
predict(filtermodel, d.new, interval="confidence")
predict(filtermodel, d.new, interval="predict")
d.new <- data.frame(date=70.0,
t1=as.integer(13),
t2=as.integer(50),
cap=as.integer(800),
pr=as.integer(1),
ne=as.integer(0)
, ct=as.integer(0),
bw=as.integer(1),
cum.n=as.integer(8),
pt=as.integer(1)
)
predict(filtermodel, d.new, interval="confidence")
predict(filtermodel, d.new, interval="predict")
d.new <- data.frame(date=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
predict(filtermodel, d.new, interval="confidence")
predict(filtermodel, d.new, interval="predict")
d.new <- data.frame(date=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
interval.conf <- predict(filtermodel, d.new, interval="confidence")
interval.pred <-predict(filtermodel, d.new, interval="predict")
d.new <- data.frame(date=70.0, t1=13, t2=50, cap=800, pr=1, ne=0, ct=0, bw=1, cum.n=8, pt=1)
interval.conf <- predict(filtermodel, d.new, interval="confidence")
interval.pred <-predict(filtermodel, d.new, interval="predict")
interval.conf
interval.pred
exp(interval.conf)
ggplot(data=d.new, aes(x,y)) +
geom_point() +
geom_errorbar(aes(ymin = interval.conf[2], ymax = interval.conf[3]))
nuclear[~target]
nuclear[~"cost"]
nuclear[-"cost"]
nuclear[-c("cost")]
nuclear[-c("cost"), ]
nuclear[ -c(1), ]
nuclear[ ,-c("cost") ]
nuclear[ ,-c(1) ]
nuclear[ ,-1 ]
# Lasso regression
library(glmnet)
# Lasso regression
library(glmnet)
install(glmnet)
installed.packages("glmnet")
# Lasso regression
library(glmnet)
install.packages("glmnet")
library(devtools)
install_version("glmnet", version = "3.0")
library(glmnet)
install.packages("glmnet", dependencies=TRUE)
install.packages('gelmnet', dependencies=TRUE, type="binary")
# Lasso regression
#library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
install.packages("glmnet")
install.packages('C:/Users/firstName lastName/Documents/Case Econometrics/Input/namePackage.tar.gz', type="source", repos = NULL)
install.packages("glmnet")
install.packages('glmnet', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("glmnet")
install.packages("glmnet")
