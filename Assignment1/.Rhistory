intercept <- fit1$coefficients[1]
model2 <- fit2$coefficients
print(setNames(c(intercept,model2), c("intercept", names(model2))
print("Model 3 - sum of coeffs zero ")
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("intercept","form1", names(model1))))
print("Model 2 - no intercept")
intercept <- fit1$coefficients[1]
model2 <- fit2$coefficients
print(setNames(c(intercept,model2), c("intercept", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(model3, beta4),c(names(model3), "form4")))
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("intercept","form1", names(model1))))
print("Model 2 - no intercept")
intercept <- fit1$coefficients[1]
model2 <- fit2$coefficients
print(setNames(c(intercept,model2), c("intercept", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients
intercept <- fit1$coefficients[1]
print(setNames(c(model3, beta4),c(names(model3), "form4")))
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("(intercept)","form1", names(model1))))
print("Model 2 - no intercept")
intercept <- fit1$coefficients[1]
model2 <- fit2$coefficients
print(setNames(c(intercept,model2), c("(intercept)", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients
intercept <- fit1$coefficients[1]
print(setNames(c(model3, beta4),c(names(model3), "form4")))
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("(intercept)","form1", names(model1))))
print("Model 2 - no intercept")
intercept <- fit1$coefficients[1]
model2 <- fit2$coefficients
print(setNames(c(intercept,model2), c("(intercept)", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients
print(setNames(c(model3, beta4),c(names(model3), "form4")))
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("(intercept)","form1", names(model1))))
print("Model 2 - no intercept")
model2 <- fit2$coefficients
intercept <- fit2$coefficients[1]
print(setNames(c(intercept,model2), c("(intercept)", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients
print(setNames(c(model3, beta4),c(names(model3), "form4")))
fit2
print("Model 1 - First Coeff Zero")
model1 <- fit1$coefficients[2:4]
intercept <- fit1$coefficients[1]
print(setNames(c(intercept, 0,model1), c("(intercept)","form1", names(model1))))
print("Model 2 - no intercept")
model2 <- fit2$coefficients
print(setNames(c(0,model2), c("(intercept)", names(model2))))
print("Model 3 - sum of coeffs zero ")
model3 <- fit3$coefficients
print(setNames(c(model3, beta4),c(names(model3), "form4")))
newdata = data.frame(form=as.factor(c(1,2,3,4)))
pred1 = predict(fit1, newdata)
pred2 = predict(fit2, newdata)
pred3 = predict(fit3, newdata)
pred1
pred2
pred3
summary(fit1)
summary(fit2)
summary(fit3)
newdata = data.frame(form=as.factor(c(1,2,3,4)))
newdata
pred1 = predict(fit1, newdata)
pred2 = predict(fit2, newdata)
pred3 = predict(fit3, newdata)
pred1
pred2
pred3
fe
Fe
mean(Fe$Fe)
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
Fe$form <- as.factor(Fe$form)
fit1 <- lm(Fe~form, data=Fe)
summary(fit1)
unlink("MandatoryAssign_1_markdown_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glmnet)
#fit with all covariates
model2 = lm(log(cost)~., data=nuclear)
summary(model2)
summary(fit1)
summary(fit2)
summary(fit3)
knit_with_parameters("~/GitHub/STK2100/Assignment1/MandatoryAssign_1_markdown.Rmd", encoding = "UTF-8")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages(c("backports", "broom", "car", "carData", "cli", "clipr", "colorspace", "conquer", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "glue", "jsonlite", "knitr", "lme4", "lubridate", "magrittr", "maptools", "mime", "nloptr", "openssl", "openxlsx", "pillar", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "rmarkdown", "rvest", "sp", "stringi", "svglite", "systemfonts", "tibble", "tidyr", "tidyselect", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "broom", "car", "carData", "cli", "clipr", "colorspace", "conquer", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "glue", "jsonlite", "knitr", "lme4", "lubridate", "magrittr", "maptools", "mime", "nloptr", "openssl", "openxlsx", "pillar", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "rmarkdown", "rvest", "sp", "stringi", "svglite", "systemfonts", "tibble", "tidyr", "tidyselect", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
require(tinytex)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
require(tinytex)
library(tidyverse)
library(glmnet)
knitr::opts_chunk$set(echo = TRUE)
require(tinytex)
library(tidyverse)
library(glmnet)
dev.new(width=5, height=5, unit="cm")
plot(filtermodel)
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
lasso.model <- glmnet(x.train, y.train, alpha=1, lambda=grid, thresh=1e-12)
#Prediction error for specific value of s
lasso.pred <- predict(lasso.model, newx=x.test, s=4)
sqrt(mean((lasso.pred-y.test)^2))
#Compare with just using the mean
sqrt(mean((mean(y[train]-y.test)^2)))
#Calcuate RSS for each value of lambda
rss = rep(NA, length(grid))
for (k in 1:length(grid)){
lasso.pred=predict(lasso.model, s=grid[k], newx=x.test)
rss[k] = sqrt(mean((lasso.pred-y.test)^2))
}
plot(log(grid), rss, type="l", xlab="log(lambda)")
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
cv.out
grid[40]
grid
grid[40]
grid[41]
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
summary(cv.out)
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
cv.out$glmnet.fit
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
#plot(cv.out)
cv.out$lambda.min
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
#plot(cv.out)
cv.out$lambda.min
coef(cv.out, cv.out$lamdba.min)
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
#plot(cv.out)
#cv.out$lambda.min
coef(cv.out, cv.out$lamdba.min)
cv.out$lamdba.min
cv.out
cv.out$lambda.min
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
#plot(cv.out)
#cv.out$lambda.min
coef(cv.out, cv.out$lambda.min)
help(cv.out)
help("cv.glmnet")
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- nuclear[ , 1]
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
coef(cv.out, cv.out$lambda.min)
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
as.matrix(coef(cv.out, cv.out$lambda.min))
filtermodel$coefficients
as.double(coef(cv.out, cv.out$lambda.min))
filtermodel$coefficients
typeof((coef(cv.out, cv.out$lambda.min))
filtermodel$coefficients
typeof(coef(cv.out, cv.out$lambda.min)
#filtermodel$coefficients
typeof(coef(cv.out, cv.out$lambda.min))
#filtermodel$coefficients
typeof(coef(cv.out, cv.out$lambda.min))
#filtermodel$coefficients
typeof(coef(cv.out, cv.out$lambda.min))
filtermodel$coefficients
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
# Lasso regression
library(glmnet)
grid <- 10^seq(5, -2, length=100)
x <- nuclear[ ,-1]
y <- log(nuclear[ , 1])
# Fitting with Lasso Regression : alpha=1 equals the l1 norm
lasso.model <- glmnet(x,y, alpha=1, lambda=grid)
#Plotting estimates for different values of lambda
plot(lasso.model, xvar="lambda")
#Dividing into training/test set
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
x.train = as.matrix(x[train,])
x.test = as.matrix(x[test,])
y.train = y[train]
y.test=y[test]
#Cross-validation
set.seed(1)
cv.out <- cv.glmnet(x.train, y.train, alpha=1)
plot(cv.out)
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
coef(cv.out, cv.out$lambda.1se)
filtermodel$coefficients
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
coef(cv.out, cv.out$lambda.min)
#filtermodel$coefficients
coef(cv.out, cv.out$lambda.min)
filtermodel$coefficients
# Box plots
cat_var <- c("pr", "ne", "ct", "bw", "pt")
boxplot(nulcear[cat_var])
# Box plots
cat_var <- c("pr", "ne", "ct", "bw", "pt")
boxplot(nuclear[cat_var])
nuclear[cat_var]
# Box plots
cat_var <- c("pr", "ne", "ct", "bw", "pt")
boxplot(nuclear["pr"])
# Box plots
cat_var <- c("pr", "ne", "ct", "bw", "pt")
boxplot(nuclear["cat_var"])
# Box plots
cat_var <- c("pr", "ne", "ct", "bw", "pt")
boxplot(nuclear[cat_var])
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
scale_x_discrete(name ="Dose (mg)",
limits=c("2","1","0.5"))
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
scale_x_discrete(name ="Confidence interval",
limits=c("2","1","0.5"))
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
scale_x_discrete(labels=c("1" = "Confidence Interval", "1" = "Prediction Interval")
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
scale_x_discrete(labels=c("1" = "Confidence Interval", "1" = "Prediction Interval"))
CI <- data.frame(rbind(interval.conf, interval.pred))
ggplot(data=CI, aes(x=seq(nrow(CI)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
scale_x_discrete(breaks=c("1","2"),
labels=c("Confidence Interval", "Prediction Interval"))
CI <- data.frame(rbind(interval.conf, interval.pred))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))+
CI <- data.frame(rbind(interval.conf, interval.pred))
CIexp <- exp(CI)
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
CI <- data.frame(rbind(interval.conf, interval.pred))
CIexp <- exp(CI)
CIexp
ggplot(data=CIexp, aes(x=seq(nrow(CIexp)), y=fit))+
geom_point() +
geom_errorbar(aes(ymin = lwr, ymax = upr))
